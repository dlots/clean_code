3.1
1.
xs = []
ys = []
zs = []
for coordinate in coordinates:
    # Поворот осей (x,y,z -> x, z, -y)
    coordinate[1], coordinate[2] = coordinate[2], -coordinate[1]
    xs.append(coordinate[0])
    ys.append(coordinate[1])
    zs.append(coordinate[2])

2.
# Корректный расчет среднего цвета ( https://sighack.com/post/averaging-rgb-colors-the-right-way )
voxel[VoxelData.RED] = int(np.floor(np.sqrt(voxel[VoxelData.RED] / voxel[VoxelData.LENGTH])))
voxel[VoxelData.GREEN] = int(
    np.floor(np.sqrt(voxel[VoxelData.GREEN] / voxel[VoxelData.LENGTH])))
voxel[VoxelData.BLUE] = int(np.floor(np.sqrt(voxel[VoxelData.BLUE] / voxel[VoxelData.LENGTH])))

3.
def generate_weighted_halin_graph(r=3, nodes=10, min_weight=1, max_weight=10):
    ...
    # для построения графа Халина необходимо объединить все листья
    # исходного дерева в цикл с сохранением планарности графа
    leaves = [node for node in graph.nodes() if graph.degree(node) == 1]
    first_in_cycle = -1
    last_in_group = -1

    for edge in tree.edges():
        weight = randint(min_weight, max_weight)
        graph[edge[0]][edge[1]]['weight'] = weight
        tree[edge[0]][edge[1]]['weight'] = weight

    for leaf in leaves:
        ...
    ...

4.
for edge_index, edge in enumerate(self.solution):
    if center_edge == edge or center_edge[::-1] == edge:
        center_edge_in_solution = True
    if fake_side_edge_0 == edge or fake_side_edge_0[::-1] == edge:
        side_edge_0_in_solution = True
        fake_edge_indices.append(edge_index)
    if fake_side_edge_1 == edge or fake_side_edge_1[::-1] == edge:
        side_edge_1_in_solution = True
        fake_edge_indices.append(edge_index)
    # необходимо найти 2 ребра из 3
    if center_edge_in_solution + side_edge_0_in_solution + side_edge_1_in_solution == 2:
        break

5.
def generate_subcubic_graph_from_cubic_graph(n_vertices, lower_delete_percentage=25, higher_delete_percentage=50):
    graph = random_regular_graph(3, n_vertices)
    delete_percentage = randint(lower_delete_percentage, higher_delete_percentage)
    n_to_delete = int(n_vertices * delete_percentage * 0.01)
    to_delete = sample(graph.edges(), k=n_to_delete)
    graph.remove_edges_from(to_delete)
    # если граф распался на компоненты связности, необходимо объединить их в 1 граф,
    # при этом он должен остаться субкубическим
    components = [component for component in connected_components(graph)]
    max_length = 0
    max_component = 0
    for i, component in enumerate(components):
        ...
        
6.
if self.__iteration_candidates[left_bridge_side]:
    # candidate on bridge; take one of sides; not the side we came from (previous is 3-3 covered)
    for neighbor in self.__graph.neighbors(left_center):
        if neighbor == left_bridge_side or neighbor == parent_vertex:
            continue
        else:
            self.__iteration_candidates[neighbor] = True
            break
else:  # candidate on side, need to take left_bridge_side to take cover more far away
    self.__iteration_candidates[left_bridge_side] = True

7.
if self.__iteration_candidates[right_bridge_side]:
    # take side vertex with highest degree (leaf is already covered; 3-vertex is better than 2-vertex)
    max_degree = 0
    max_degree_vertex = None
    for neighbor in self.__graph.neighbors(right_center):
        if neighbor != right_bridge_side:
            degree = self.__graph.degree(neighbor)
            if degree > max_degree:
                max_degree = degree
                max_degree_vertex = neighbor
    self.__iteration_candidates[max_degree_vertex] = True
else:
    # take other side vertex
    for neighbor in self.__graph.neighbors(right_center):
        if neighbor == right_bridge_side or self.__iteration_candidates[neighbor]:
            continue
        else:
            self.__iteration_candidates[neighbor] = True
            break

3.2
1. Код понятен и без комментария
было:
if db_exists:
    # Database already exists. Skipping sample data creation.
    return self.database_exists
    
стало:
if db_exists:
    return self.database_exists

2. Убрал комментарий и вместо этого сделал более информативным название процедуры.
было:
 # DB created. Inserting sample data.
procedures_loaded = self.load_procedures(self.functions_and_procedures_script_path)
if procedures_loaded:
    self.execute("CALL CreateTables();", "ERROR CREATING TABLE STRUCTURE")
    self.execute("CALL FillAllTables();", "ERROR FILLING ALL TABLES")
    return self.database_created

стало:
procedures_loaded = self.load_procedures(self.functions_and_procedures_script_path)
if procedures_loaded:
    self.execute("CALL CreateTables();", "ERROR CREATING TABLE STRUCTURE")
    self.execute("CALL FillAllTablesWithSampleData ();", "ERROR FILLING ALL TABLES")
    return self.database_created

3. сделать условие методом
было:
    # corner cases (special handling needed when solving for cover)
    # leaf or "double path"
    if self.__graph.degree(second_vertex) == 1 or other_neighbor == second_vertex:
        self.__solve_cover_for_3_vertex_and_stop_vertex(first_vertex, neighbor, second_vertex)
        continue
    
стало:
def is_corner_case(second_vertex, other_neighbor):
    return self.__graph.degree(second_vertex) == 1 or other_neighbor == second_vertex

...

    if is_corner_case(second_vertex, other_neighbor):
        self.__solve_cover_for_3_vertex_and_stop_vertex(first_vertex, neighbor, second_vertex)
        continue

4. Бесполезный комментарий
было:
# found "leaf cycle"
if second_vertex == first_vertex:
    leaf_cycle = True
    self.__solve_cover_for_3_vertex_and_stop_vertex(first_vertex, neighbor, second_vertex)
    continue
    
стало:
if second_vertex == first_vertex:
    leaf_cycle = True
    self.__solve_cover_for_3_vertex_and_stop_vertex(first_vertex, neighbor, second_vertex)
    continue
