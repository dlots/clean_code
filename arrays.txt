1. Вместо параллельной итерации по 3 массивам при помощи индексов, использовать zip()
было:
for vertex_index in range(len(coordinates)):
    normalized_x = (xs[vertex_index] - min_xs) / max_range
    normalized_y = (ys[vertex_index] - min_ys) / max_range
    normalized_z = (zs[vertex_index] - min_zs) / max_range
    
стало:
for x, y, z in zip(xs, ys, zs):
    normalized_x = (x - min_xs) / max_range
    normalized_y = (y - min_ys) / max_range
    normalized_z = (z - min_zs) / max_range


2. Вместо перебора индексов и получения вокселя по координатам, представить 4d массив вокселей (ё) в 2d виде (список данных вокселей).
было:
for x in range(len(voxel_grid[0])):
    for y in range(len(voxel_grid[1])):
        for z in range(len(voxel_grid[2])):
            voxel = voxel_grid[x][y][z]
            ...

стало:
X = voxel_grid_dimX
Y = voxel_grid_dimY
Z = voxel_grid_dimZ
for voxel in voxel_grid.reshape((X*Y*Z, VoxelData.NUMBER_OF_ATTRIBUTES)):
    ...

3. Можно заменить массив на односвязный список, так как на каждом шаге цикла используется только текущий и следующий элементы
было:
for leaf in leaves:
    parent = next(graph.neighbors(leaf))
    siblings = [node for node in graph.neighbors(parent) if graph.degree(node) == 1]
    if first_in_cycle == -1:
        first_in_cycle = siblings[0]
    if last_in_group != -1:
        graph.add_edge(last_in_group, siblings[0])
        weight = randint(min_weight, max_weight)
        graph[last_in_group][siblings[0]]['weight'] = weight
    last_in_group = siblings[-1]
    leaves.remove(last_in_group)
    for leaf_index in range(len(siblings) - 1):
        sibling = siblings[leaf_index]
        next_sibling = siblings[leaf_index + 1]
        if leaf != sibling:
            leaves.remove(sibling)
        graph.add_edge(sibling, next_sibling)
        weight = randint(min_weight, max_weight)
        graph[sibling][next_sibling]['weight'] = weight
    
стало:
for leaf in leaves:
    parent = next(graph.neighbors(leaf))
    siblings = LinkedList()
    for node in graph.neighbors(parent):
        if graph.degree(node) == 1]:
            siblings.add(node)
    if first_in_cycle == -1:
        first_in_cycle = siblings.head()
    if last_in_group != -1:
        graph.add_edge(last_in_group, siblings.head())
        weight = randint(min_weight, max_weight)
        graph[last_in_group][siblings.head()]['weight'] = weight
    last_in_group = siblings.tail()
    leaves.remove(last_in_group)
    for sibling in siblings:
        next_sibling = sibling.next()
        if leaf != sibling:
            leaves.remove(sibling)
        graph.add_edge(sibling, next_sibling)
        weight = randint(min_weight, max_weight)
        graph[sibling][next_sibling]['weight'] = weight


4. Почему-то использовал список, хотя больше подходит словарь.
было:
def nx_to_adj_list(graph):
    adj_list = []
    for node in graph:
        adj_list.append([])
        for adj in graph.adj[node]:
            adj_list[node].append([adj, graph[node][adj]['weight']])
    return adj_list

стало:
def nx_to_adj_list(graph):
    adj_list = {}
    for node in graph:
        if node not in adj_list:
            adj_list[node] = []
        for adj in graph.adj[node]:
            adj_list[node].append((adj, graph[node][adj]['weight']))
    return adj_list


5. В Питоне сложные типы не копируются при связывании с другой переменной, поэтому нет смысла сохранять индекс при поиске максимума.
   Это позволит избавиться от прямой адресации по этому индексу.
было:
max_length = 0
max_component = 0
for i, component in enumerate(components):
    if len(component) > max_length:
        max_length = len(component)
        max_component = i

стало:
max_length = 0
max_component = None
for component in components:
    if len(component) > max_length:
        max_length = len(component)
        max_component = component
